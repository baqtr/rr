import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
import os
import time

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "6529257547:AAG2MGxNXMLGxQtyUtA2zWEylP9QD5m-hGE"

language = "ar"

messages = {
    "en": {
        "start": "üëã Hello! I am a bot that converts PHP files to Python. Please send a PHP file to start.",
        "invalid_file": "‚ùå Please send a PHP file with .php extension.",
        "file_received": "üìÇ File received. Choose an option:",
        "convert_success": "‚úÖ Conversion successful. Here is your Python file.",
        "choose_language": "Please choose a language:",
        "back_to_menu": "üîô Back to Menu",
        "send_file": "üì§ Send File",
        "change_language": "üåê Change Language",
        "show_stats": "üìä Show File Statistics",
        "convert_file": "üîÑ Convert File",
        "conversion_result": "üîÑ Conversion Result",
        "conversion_time": "‚è≥ Estimated conversion time: {time} seconds",
    },
    "ar": {
        "start": "üëã ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿ£ŸÜÿß ÿ®Ÿàÿ™ ŸÑÿ™ÿ≠ŸàŸäŸÑ ŸÖŸÑŸÅÿßÿ™ PHP ÿ•ŸÑŸâ ÿ®ÿßŸäÿ´ŸàŸÜ. ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿ±ÿ≥ÿßŸÑ ŸÖŸÑŸÅ PHP ŸÑŸÑÿ®ÿØÿ°.",
        "invalid_file": "‚ùå ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿ±ÿ≥ÿßŸÑ ŸÖŸÑŸÅ PHP ÿ®ÿßŸÖÿ™ÿØÿßÿØ .php",
        "file_received": "üìÇ ÿ™ŸÖ ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ÿßŸÑŸÖŸÑŸÅ. ÿßÿÆÿ™ÿ± ÿÆŸäÿßÿ±Ÿãÿß:",
        "convert_success": "‚úÖ ÿ™ŸÖ ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ ÿ®ŸÜÿ¨ÿßÿ≠. ÿ•ŸÑŸäŸÉ ŸÖŸÑŸÅ ÿ®ÿßŸäÿ´ŸàŸÜ.",
        "choose_language": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÑÿ∫ÿ©:",
        "back_to_menu": "üîô ÿßŸÑÿπŸàÿØÿ© ÿ•ŸÑŸâ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©",
        "send_file": "üì§ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÖŸÑŸÅ",
        "change_language": "üåê ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÑÿ∫ÿ©",
        "show_stats": "üìä ÿπÿ±ÿ∂ ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑŸÖŸÑŸÅ",
        "convert_file": "üîÑ ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÖŸÑŸÅ",
        "conversion_result": "üîÑ ŸÜÿ™Ÿäÿ¨ÿ© ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ",
        "conversion_time": "‚è≥ ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖŸÇÿØÿ± ŸÑŸÑÿ™ÿ≠ŸàŸäŸÑ: {time} ÿ´ŸàÿßŸÜŸä",
    }
}

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(messages[language]["start"])

def handle_file(update: Update, context: CallbackContext) -> None:
    file = update.message.document
    if file.file_name.endswith('.php'):
        file_path = file.get_file().download()
        context.user_data['file_path'] = file_path
        context.user_data['file_name'] = file.file_name

        show_menu(update.message.reply_text, messages[language]["file_received"])
    else:
        update.message.reply_text(messages[language]["invalid_file"])

def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    file_path = context.user_data.get('file_path')
    if not file_path and query.data not in ['change_language', 'back_to_menu']:
        query.edit_message_text(text=messages[language]["invalid_file"], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(messages[language]["back_to_menu"], callback_data='back_to_menu')]]))
        return

    if query.data == 'convert_file':
        convert_file(query, file_path, context)
    elif query.data == 'send_file':
        send_file(query, context)
    elif query.data == 'change_language':
        change_language(query)
    elif query.data == 'show_stats':
        show_stats(query, file_path)
    elif query.data == 'conversion_result':
        show_conversion_result(query, context)
    elif query.data == 'back_to_menu':
        back_to_menu(query, context)

def convert_file(query, file_path, context):
    start_time = time.time()
    query.edit_message_text(text=messages[language]["conversion_time"].format(time="..."))

    with open(file_path, 'r') as f:
        php_code = f.read()
    python_code = convert_php_to_python(php_code)

    python_file_path = file_path.replace('.php', '.py')
    with open(python_file_path, 'w') as f:
        f.write(python_code)

    context.user_data['converted_file_path'] = python_file_path
    context.user_data['modifications'] = ["ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÖŸÑŸÅ ŸÖŸÜ PHP ÿ•ŸÑŸâ ÿ®ÿßŸäÿ´ŸàŸÜ"]

    end_time = time.time()
    elapsed_time = end_time - start_time

    query.edit_message_text(text=messages[language]["convert_success"], reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton(messages[language]["send_file"], callback_data='send_file')],
        [InlineKeyboardButton(messages[language]["conversion_result"], callback_data='conversion_result')],
        [InlineKeyboardButton(messages[language]["back_to_menu"], callback_data='back_to_menu')]
    ]))

    query.message.reply_text(messages[language]["conversion_time"].format(time=round(elapsed_time, 2)))

def convert_php_to_python(php_code):
    # Here you would implement a more sophisticated conversion from PHP to Python
    # This is a placeholder conversion for demonstration purposes
    python_code = php_code.replace("<?php", "").replace("?>", "").replace(";", "\n")
    # Add necessary imports or other transformations here
    python_code = "import necessary_libraries\n" + python_code
    return python_code

def send_file(query, context):
    converted_file_path = context.user_data.get('converted_file_path')
    if converted_file_path:
        with open(converted_file_path, 'rb') as f:
            context.bot.send_document(chat_id=query.message.chat_id, document=InputFile(f, filename=os.path.basename(converted_file_path)))

        query.edit_message_text(text=messages[language]["send_file"], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(messages[language]["back_to_menu"], callback_data='back_to_menu')]]))
    else:
        query.edit_message_text(text="‚ö†Ô∏è ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÖŸÑŸÅ ÿ®ÿπÿØ. ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÖŸÑŸÅ ÿ£ŸàŸÑÿßŸã.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(messages[language]["back_to_menu"], callback_data='back_to_menu')]]))

def change_language(query):
    global language
    language = "ar" if language == "en" else "en"
    show_menu(query.edit_message_text, messages[language]["choose_language"])

def show_stats(query, file_path):
    line_count = sum(1 for line in open(file_path))
    query.edit_message_text(text=f"üìä ÿπÿØÿØ ÿ≥ÿ∑Ÿàÿ± ÿßŸÑŸÖŸÑŸÅ: {line_count}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(messages[language]["back_to_menu"], callback_data='back_to_menu')]]))

def show_conversion_result(query, context):
    modifications = context.user_data.get('modifications', [])
    file_path = context.user_data['file_path']
    converted_file_path = context.user_data.get('converted_file_path')

    original_line_count = sum(1 for line in open(file_path))
    converted_line_count = sum(1 for line in open(converted_file_path)) if converted_file_path else 0

    result_text = f"ÿπÿØÿØ ÿßŸÑÿ™ÿπÿØŸäŸÑÿßÿ™: {len(modifications)}\nÿπÿØÿØ ÿ≥ÿ∑Ÿàÿ± ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ£ÿµŸÑŸä: {original_line_count}\nÿπÿØÿØ ÿ≥ÿ∑Ÿàÿ± ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ≠ŸàŸÑ: {converted_line_count}\nŸÜÿ≥ÿ®ÿ© ŸÜÿ¨ÿßÿ≠ ÿßŸÑÿπŸÖŸÑŸäÿ©: ‚úÖ"
    query.edit_message_text(text=result_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(messages[language]["back_to_menu"], callback_data='back_to_menu')]]))

def back_to_menu(query, context):
    show_menu(query.edit_message_text, messages[language]["start"])

def show_menu(reply_func, message):
    keyboard = [
        [InlineKeyboardButton(messages[language]["convert_file"], callback_data='convert_file')],
        [InlineKeyboardButton(messages[language]["send_file"], callback_data='send_file')],
        [InlineKeyboardButton(messages[language]["show_stats"], callback_data='show_stats')],
        [InlineKeyboardButton(messages[language]["change_language"], callback_data='change_language')],
        [InlineKeyboardButton(messages[language]["back_to_menu"], callback_data='back_to_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    reply_func(message, reply_markup=reply_markup)

def main() -> None:
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.document, handle_file))
    dp.add_handler(CallbackQueryHandler(button))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
